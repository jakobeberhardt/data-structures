

@article{lin2019branch,
  title={Branch Prediction Is Not a Solved Problem: Measurements, Opportunities, and Future Directions},
  author={Lin, Chit-Kwan and Tarsa, Stephen J.},
  journal={arXiv preprint arXiv:1906.08170},
  year={2019}
}

@inproceedings{Lattner2004LLVM,
  author    = {Chris Lattner and Vikram Adve},
  title     = {{LLVM}: A Compilation Framework for Lifelong Program Analysis \& Transformation},
  booktitle = {Proceedings of the International Symposium on Code Generation and Optimization (CGO)},
  year      = {2004},
  pages     = {75--86},
  publisher = {IEEE},
  doi       = {10.1109/CGO.2004.1281665},
  url       = {https://doi.org/10.1109/CGO.2004.1281665}
}

@misc{perfwiki2025,
  author       = {{perf: Linux profiling with performance counters}},
  title        = {perf: Linux profiling with performance counters, mainpage},
  year         = {2025},
  howpublished = {\url{https://perfwiki.github.io/main/}},
  note         = {Accessed: 5 June 2025}
}

@inproceedings{10.1145/279358.279391,
author = {August, David I. and Connors, Daniel A. and Mahlke, Scott A. and Sias, John W. and Crozier, Kevin M. and Cheng, Ben-Chung and Eaton, Patrick R. and Olaniran, Qudus B. and Hwu, Wen-mei W.},
title = {Integrated predicated and speculative execution in the IMPACT EPIC architecture},
year = {1998},
isbn = {0818684917},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1145/279358.279391},
doi = {10.1145/279358.279391},
abstract = {Explicitly Parallel Instruction Computing (EPIC) architectures require the compiler to express program instruction level parallelism directly to the hardware. EPIC techniques which enable the compiler to represent control speculation, data dependence speculation, and predication have individually been shown to be very effective. However, these techniques have not been studied in combination with each other. This paper presents the IMPACT EPIC Architecture to address the issues involved in designing processors based on these EPIC concepts. In particular, we focus on new execution and recovery models in which microarchitectural support for predicated execution is also used to enable efficient recovery from exceptions caused by speculatively executed instructions. This paper demonstrates that a coherent framework to integrate the three techniques can be elegantly designed to achieve much better performance than each individual technique could alone provide.},
booktitle = {Proceedings of the 25th Annual International Symposium on Computer Architecture},
pages = {227â€“237},
numpages = {11},
location = {Barcelona, Spain},
series = {ISCA '98}
}

@misc{gcc-opt-manual,
  author       = {{GNU Project}},
  title        = {3.12 Options That Control Optimization},
  howpublished = {\url{https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html}},
  note         = {Accessed: 2025-06-13},
  year         = {2025},
  organization = {GNU Compiler Collection (GCC) Manual},
}
@misc{khuong2017arraylayoutscomparisonbasedsearching,
      title={Array Layouts for Comparison-Based Searching}, 
      author={Paul-Virak Khuong and Pat Morin},
      year={2017},
      eprint={1509.05053},
      archivePrefix={arXiv},
      primaryClass={cs.DS},
      url={https://arxiv.org/abs/1509.05053}, 
}